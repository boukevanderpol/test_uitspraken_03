apply(verbinden$tekst_waarde, MARGIN = 1, FUN = min)
apply(verbinden, MARGIN = 1, FUN = min)
apply(verbinden$tekst_waarde, MARGIN = 1, FUN = min)
tekst_waarde2 <- verbinden$tekst_waarde
apply(tekst_waarde2, MARGIN = 1, FUN = min)
tekst_waarde2
apply(tekst_waarde2, MARGIN = 1, FUN = length)
View(ecli_w3)
apply(tekst_waarde2, MARGIN = 1, FUN = str_length)
gerecht <- verbinden %>% filter(kolom_waarde == "creator")
gerecht
gerecht <- verbinden %>%
select(tekst_waarde(filter(kolom_waarde == "creator")))
gerecht <- select(verbinden$tekst_waarde(filter(verbinden$kolom_waarde == "creator")))
gerecht <- filter(verbinden$kolom_waarde == "creator")))
gerecht <- verbinden %>% filter(kolom_waarde == "creator")
gerecht <- verbinden %>% filter(kolom_waarde == "creator") %>%
select(tekst_waarde)
gerecht
gerecht <- verbinden %>% filter(kolom_waarde == "creator") %>%
as.character(select(tekst_waarde))
gerecht <- as.character(gerecht)
gerecht
ecli <- verbinden %>% filter(kolom_waarde == "identifier") %>%
select(tekst_waarde)
ecli
ecli <- verbinden %>% filter(kolom_waarde == "identifier") %>%
select(tekst_waarde) %>% mutate(str_length)
ecli <- verbinden %>% filter(kolom_waarde == "identifier") %>%
select(tekst_waarde) %>% mutate(str_length(tekst_waarde))
ecli
ecli <- verbinden %>% filter(kolom_waarde == "identifier") %>%
select(tekst_waarde) %>%
mutate(rijen = seq_along(verbinden), str_length(tekst_waarde)) %>%
)
verbinden
ecli <- verbinden %>% filter(kolom_waarde == "identifier") %>%
select(rijen, tekst_waarde) %>%
mutate(str_length(tekst_waarde))
View(ecli)
ecli <- verbinden %>% filter(kolom_waarde == "identifier") %>%
select(rijen, tekst_waarde) %>%
mutate(str_length(tekst_waarde, colnames("lengte")))
?colnames
ecli <- verbinden %>% filter(kolom_waarde == "identifier") %>%
select(rijen, tekst_waarde) %>%
mutate(str_length(tekst_waarde))
?rank
?top_n
df <- data.frame(x = c(10, 4, 1, 6, 3, 1, 1))
df %>% top_n(2)
df %>% top_n(-2)
df %>% top_n(1)
df %>% top_n(-1)
library(tidyverse)
library(xml2)
uit <- xml2::read_xml("D:/DummyDir/ECLI_NL_CBB_2019_1.xml", as = "text", encoding = "utf-8")
uit2 <- xml_children(xml_children(uit))
uit2a <- xml_find_all(uit2, xpath = "*")
uit2b <- tibble(rijen = seq_along(uit2a), nodeset = uit2a)
uit2_tibble <- uit2b %>%
mutate( kolom_waarde = nodeset %>% map(~xml_name(.)),
tekst_waarde = nodeset %>% map(~xml_text(.))) %>%
select(rijen, kolom_waarde, tekst_waarde)
naam_variabelen <- names(uit2_tibble)
aaa <- as_tibble(uit2_tibble$rijen)
bbb <- as_tibble(as.character(uit2_tibble$kolom_waarde))
ccc <- as_tibble(as.character(uit2_tibble$tekst_waarde))
verbinden <- bind_cols(aaa, bbb, ccc)
colnames(verbinden) <- naam_variabelen
rm(aaa, bbb, ccc, naam_variabelen,
uit, uit2a, uit2b, uit2_tibble)
uit <- xml2::read_xml("D:/DummyDir/ECLI_NL_CBB_2019_1.xml", as = "text", encoding = "utf-8")
uit2 <- xml_children(xml_children(uit))
uit2a <- xml_find_all(uit2, xpath = "*")
uit2b <- tibble(rijen = seq_along(uit2a), nodeset = uit2a)
uit2_tibble <- uit2b %>%
mutate( kolom_waarde = nodeset %>% map(~xml_name(.)),
tekst_waarde = nodeset %>% map(~xml_text(.))) %>%
select(rijen, kolom_waarde, tekst_waarde)
naam_variabelen <- names(uit2_tibble)
aaa <- as_tibble(uit2_tibble$rijen)
bbb <- as_tibble(as.character(uit2_tibble$kolom_waarde))
ccc <- as_tibble(as.character(uit2_tibble$tekst_waarde))
uitspraak <- bind_cols(aaa, bbb, ccc)
colnames(verbinden) <- naam_variabelen
rm(aaa, bbb, ccc, naam_variabelen,
uit, uit2a, uit2b, uit2_tibble)
gerecht <- uitspraak %>% filter(kolom_waarde == "creator") %>%
select(tekst_waarde)
gerecht <- as.character(gerecht)
View(uitspraak)
View(uitspraak)
uit <- xml2::read_xml("D:/DummyDir/ECLI_NL_CBB_2019_1.xml", as = "text", encoding = "utf-8")
uit2 <- xml_children(xml_children(uit))
uit2a <- xml_find_all(uit2, xpath = "*")
uit2b <- tibble(rijen = seq_along(uit2a), nodeset = uit2a)
uit2_tibble <- uit2b %>%
mutate( kolom_waarde = nodeset %>% map(~xml_name(.)),
tekst_waarde = nodeset %>% map(~xml_text(.))) %>%
select(rijen, kolom_waarde, tekst_waarde)
naam_variabelen <- names(uit2_tibble)
aaa <- as_tibble(uit2_tibble$rijen)
bbb <- as_tibble(as.character(uit2_tibble$kolom_waarde))
ccc <- as_tibble(as.character(uit2_tibble$tekst_waarde))
uitspraak <- bind_cols(aaa, bbb, ccc)
colnames(uitspraak) <- naam_variabelen
rm(aaa, bbb, ccc, naam_variabelen,
uit, uit2a, uit2b, uit2_tibble)
gerecht <- uitspraak %>% filter(kolom_waarde == "creator") %>%
select(tekst_waarde)
gerecht <- as.character(gerecht)
ecli <- uitspraak %>% filter(kolom_waarde == "identifier") %>%
select(rijen, tekst_waarde) %>%
mutate(str_length(tekst_waarde))
ecli_2 <- ecli %>% top_n(-1)
View(ecli_2)
View(ecli)
ecli$rijen[1] <- 100
View(ecli)
ecli$rijen[1] <- 1
ecli$`str_length(tekst_waarde)`[1] <- 100
View(ecli)
ecli_2 <- ecli %>% top_n(-1)
ecli_2 <- ecli %>% top_n(n = -1, wt = 'str_length(tekst_waarde)')
ecli_2 <- ecli %>% top_n(n = -1, wt = rijen)
View(ecli_2)
View(ecli_2)
ecli_2 <- ecli %>% top_n(n = -1, wt = 'str_length(tekst_waarde)')
View(ecli_2)
View(ecli_2)
ecli_2 <- ecli %>% top_n(n = -1, wt = rijen)
ecli_2 <- ecli %>% top_n(n = -1, wt = 'str_length(tekst_waarde)')
ecli <- uitspraak %>% filter(kolom_waarde == "identifier") %>%
select(rijen, tekst_waarde) %>%
mutate(str_length(tekst_waarde), lengte)
colnames(ecli$`str_length(tekst_waarde)`) <- c("lengte")
colnames(ecli$`str_length(tekst_waarde)`) <- "lengte"
?rename
ecli <- ecli %>% rename(lengte = 'str_length(tekst_waarde)')
ecli
ecli_2 <- ecli %>% top_n(n = -1, wt = lengte)
View(ecli_2)
ecli_2 <- ecli %>% top_n(n = -1, wt = rijen)
View(ecli_2)
uit <- xml2::read_xml("D:/DummyDir/ECLI_NL_CBB_2019_1.xml", as = "text", encoding = "utf-8")
uit2 <- xml_children(xml_children(uit))
uit2a <- xml_find_all(uit2, xpath = "*")
uit2b <- tibble(rijen = seq_along(uit2a), nodeset = uit2a)
uit2_tibble <- uit2b %>%
mutate( kolom_waarde = nodeset %>% map(~xml_name(.)),
tekst_waarde = nodeset %>% map(~xml_text(.))) %>%
select(rijen, kolom_waarde, tekst_waarde)
naam_variabelen <- names(uit2_tibble)
aaa <- as_tibble(uit2_tibble$rijen)
bbb <- as_tibble(as.character(uit2_tibble$kolom_waarde))
ccc <- as_tibble(as.character(uit2_tibble$tekst_waarde))
uitspraak <- bind_cols(aaa, bbb, ccc)
colnames(uitspraak) <- naam_variabelen
rm(aaa, bbb, ccc, naam_variabelen,
uit, uit2a, uit2b, uit2_tibble)
gerecht <- uitspraak %>% filter(kolom_waarde == "creator") %>%
select(tekst_waarde)
gerecht <- as.character(gerecht)
ecli <- uitspraak %>% filter(kolom_waarde == "identifier") %>%
select(rijen, tekst_waarde) %>%
mutate(str_length(tekst_waarde))
ecli <- ecli %>% rename(lengte = 'str_length(tekst_waarde)')
ecli <- ecli %>% top_n(n = -1, wt = lengte) %>%
select(tekst_waarde)
ecli <- as.character(ecli)
library(tidyverse)
library(xml2)
library(tidyverse)
library(xml2)
uit <- xml2::read_xml("D:/DummyDir/ECLI_NL_CBB_2019_1.xml", as = "text", encoding = "utf-8")
uit2 <- xml_children(xml_children(uit))
uit2a <- xml_find_all(uit2, xpath = "*")
uit2b <- tibble(rijen = seq_along(uit2a), nodeset = uit2a)
uit2_tibble <- uit2b %>%
mutate( kolom_waarde = nodeset %>% map(~xml_name(.)),
tekst_waarde = nodeset %>% map(~xml_text(.))) %>%
select(rijen, kolom_waarde, tekst_waarde)
naam_variabelen <- names(uit2_tibble)
aaa <- as_tibble(uit2_tibble$rijen)
bbb <- as_tibble(as.character(uit2_tibble$kolom_waarde))
ccc <- as_tibble(as.character(uit2_tibble$tekst_waarde))
uitspraak <- bind_cols(aaa, bbb, ccc)
colnames(uitspraak) <- naam_variabelen
rm(aaa, bbb, ccc, naam_variabelen,
uit, uit2a, uit2b, uit2_tibble)
gerecht <- uitspraak %>% filter(kolom_waarde == "creator") %>%
select(tekst_waarde)
gerecht <- as.character(gerecht)
ecli <- uitspraak %>% filter(kolom_waarde == "identifier") %>%
select(rijen, tekst_waarde) %>%
mutate(str_length(tekst_waarde))
ecli <- ecli %>% rename(lengte = 'str_length(tekst_waarde)')
ecli <- ecli %>% top_n(n = -1, wt = lengte) %>%
select(tekst_waarde)
ecli <- as.character(ecli)
Verzamelde_uitspraken <- tibble(gerecht, ecli)
Verzamelde_uitspraken
rij_nieuw <- c(gerecht, ecli)
bind_rows(Verzamelde_uitspraken, rij_nieuw)
bind_rows(Verzamelde_uitspraken, c(gerecht, ecli))
rij_nieuw <- tibble(gerecht = gerecht, ecli = ecli)
bind_rows(Verzamelde_uitspraken, rij_nieuw)
bind_rows(Verzamelde_uitspraken, rij_nieuw)
bind_rows(Verzamelde_uitspraken, tibble(gerecht = gerecht, ecli = ecli))
Verzamelde_uitspraken
?tibble
?rbind
library(tidyverse)
library(xml2)
library(lubridate)
verzamelde_uitspraken <- dplyr::tibble(.rows = NULL)
uit <- xml2::read_xml("D:/DummyDir/ECLI_NL_CBB_2019_1.xml", as = "text", encoding = "utf-8")
uit2 <- xml_children(xml_children(uit))
View(uit2)
View(uit)
uit_1 <- xml_children(uit)
View(uit_1)
uit1 <- uit_1[3]
View(uit1)
uit1a <- xml_find_all(uit1, xpath = "*")
uit1b <- tibble(rijen = seq_along(uit1a), nodeset = uit1a)
uit1_tibble <- uit1b %>%
mutate( kolom_waarde = nodeset %>% map(~xml_name(.)),
tekst_waarde = nodeset %>% map(~xml_text(.))) %>%
select(rijen, kolom_waarde, tekst_waarde)
naam_variabelen <- names(uit1_tibble)
kkk <- as_tibble(uit1_tibble$rijen)
lll <- as_tibble(as.character(uit1_tibble$kolom_waarde))
mmm <- as_tibble(as.character(uit1_tibble$tekst_waarde))
uitspraak1 <- bind_cols(kkk, lll, mmm)
colnames(uitspraak1) <- naam_variabelen
View(uitspraak1)
View(uit1)
View(uit1a)
View(uit1b)
View(uit1a)
uit1aa <- uit1a[4]
View(uit1aa)
uit1aaa <- xml_find_all(uit1aa, xpath = "*")
View(uit1aaa)
uit1b <- tibble(rijen = seq_along(uit1aaa), nodeset = uit1aa)
uit1_tibble <- uit1b %>%
mutate( kolom_waarde = nodeset %>% map(~xml_name(.)),
tekst_waarde = nodeset %>% map(~xml_text(.))) %>%
select(rijen, kolom_waarde, tekst_waarde)
naam_variabelen <- names(uit1_tibble)
kkk <- as_tibble(uit1_tibble$rijen)
lll <- as_tibble(as.character(uit1_tibble$kolom_waarde))
mmm <- as_tibble(as.character(uit1_tibble$tekst_waarde))
uitspraak1 <- bind_cols(kkk, lll, mmm)
colnames(uitspraak1) <- naam_variabelen
View(uitspraak1)
View(uit1_tibble)
uit1a <- xml_children(uit1)
View(uit1a)
uit1aa <- uit1a[4]
uit1aaa <- xml_find_all(uit1aa, xpath = "*")
uit1b <- tibble(rijen = seq_along(uit1aaa), nodeset = uit1aa)
uit1_tibble <- uit1b %>%
mutate( kolom_waarde = nodeset %>% map(~xml_name(.)),
tekst_waarde = nodeset %>% map(~xml_text(.))) %>%
select(rijen, kolom_waarde, tekst_waarde)
naam_variabelen <- names(uit1_tibble)
kkk <- as_tibble(uit1_tibble$rijen)
lll <- as_tibble(as.character(uit1_tibble$kolom_waarde))
mmm <- as_tibble(as.character(uit1_tibble$tekst_waarde))
uitspraak1 <- bind_cols(kkk, lll, mmm)
colnames(uitspraak1) <- naam_variabelen
View(uitspraak1)
View(uit1a)
View(uit1aaa)
View(uit1a)
View(uit1aa)
View(uit1aaa)
uit1a <- xml_children(xml_children(xml_children(uit1)))
View(uit1a)
verzamelde_uitspraken <- dplyr::tibble(.rows = NULL)
uit <- xml2::read_xml("D:/DummyDir/ECLI_NL_CBB_2019_1.xml", as = "text", encoding = "utf-8")
uit_1 <- xml_children(uit)
uit1 <- uit_1[3]
uit1a <- xml_children(uit1)
#uit1a <- xml_find_all(uit1, xpath = "*")
uit1aa <- uit1a[4]
uit1aaa <- xml_find_all(uit1aa, xpath = "*")
uit1b <- tibble(rijen = seq_along(uit1aaa), nodeset = uit1aaa)
uit1_tibble <- uit1b %>%
mutate( kolom_waarde = nodeset %>% map(~xml_name(.)),
tekst_waarde = nodeset %>% map(~xml_text(.))) %>%
select(rijen, kolom_waarde, tekst_waarde)
naam_variabelen <- names(uit1_tibble)
kkk <- as_tibble(uit1_tibble$rijen)
lll <- as_tibble(as.character(uit1_tibble$kolom_waarde))
mmm <- as_tibble(as.character(uit1_tibble$tekst_waarde))
uitspraak1 <- bind_cols(kkk, lll, mmm)
colnames(uitspraak1) <- naam_variabelen
View(uitspraak1)
View(uit_1)
View(uit1)
uit <- xml2::read_xml("D:/DummyDir/ECLI_NL_CBB_2019_1.xml", as = "text", encoding = "utf-8")
uit3 <- xml_children(uit)
uit3a <- uit3[3]
uit3aa <- xml_children(uit3a)
#uit1a <- xml_find_all(uit1, xpath = "*")
uit3aaa <- uit3aa[4]
uit3aaaa <- xml_find_all(uit3aaa, xpath = "*")
uit3b <- tibble(rijen = seq_along(uit3aaaa), nodeset = uit3aaaa)
uit3_tibble <- uit3b %>%
mutate( kolom_waarde = nodeset %>% map(~xml_name(.)),
tekst_waarde = nodeset %>% map(~xml_text(.))) %>%
select(rijen, kolom_waarde, tekst_waarde)
naam_variabelen <- names(uit3_tibble)
kkk <- as_tibble(uit3_tibble$rijen)
lll <- as_tibble(as.character(uit3_tibble$kolom_waarde))
mmm <- as_tibble(as.character(uit3_tibble$tekst_waarde))
uitspraak3 <- bind_cols(kkk, lll, mmm)
colnames(uitspraak3) <- naam_variabelen
View(uitspraak3)
View(kkk)
View(lll)
View(mmm)
View(uitspraak3)
title_waarde <- uitspraak3 %>%
dplyr::filter(kolom_waarde == "title") %>%
dplyr::select(tekst_waarde)
title_waarde <- as.character(title_waarde)
?if_else
?coalesce
y <- c(1, 2, NA, NA, 5)
z <- c(NA, NA, 3, 4, 5)
coalesce(y, z)
x <- sample(c(1:5, NA, NA, NA))
coalesce(x, 0L)
x <- c(1:5, NA, NA, NA)
coalesce(x, 0L)
coalesce(x)
rm(x, y, z)
?str_detect
if (title_waarde == "Beslissing"){
for (i in 1:max(rijen)){
tekst <- uitspraak3$tekst_waarde[1]
if (str_detect(tekst, "gegrond", negate = FALSE) == TRUE){
oordeel <- tekst
}
rm(tekst)
}
}
View(uit3a)
if (title_waarde == "Beslissing"){
for (i in 1:max(uitspraak3$rijen)){
tekst <- uitspraak3$tekst_waarde[1]
if (str_detect(tekst, "gegrond", negate = FALSE) == TRUE){
oordeel <- tekst
}
rm(tekst)
}
}
uitspraak3$rijen
max(uitspraak3$rijen)
uitspraak3$tekst_waarde[1]
if (title_waarde == "Beslissing"){
for (i in 1:max(uitspraak3$rijen)){
tekst <- uitspraak3$tekst_waarde[i]
if (str_detect(tekst, "gegrond", negate = FALSE) == TRUE){
oordeel <- tekst
}
rm(tekst)
}
}
if (title_waarde == "Beslissing"){
for (i in 1:max(uitspraak3$rijen)){
tekst <- uitspraak3$tekst_waarde[i]
if (str_detect(tekst, "gegrond", negate = FALSE) == TRUE){
oordeel <- tekst
}
rm(tekst)
}
for (i in 1:max(uitspraak3$rijen)){
tekst <- uitspraak3$tekst_waarde[i]
if (str_detect(tekst, "door mr", negate = FALSE) == TRUE){
uitspraak_door <- tekst
}
rm(tekst)
}
}
if (title_waarde == "Beslissing"){
for (i in 1:max(uitspraak3$rijen)){
tekst <- uitspraak3$tekst_waarde[i]
if (str_detect(tekst, "gegrond", negate = FALSE) == TRUE){
oordeel <- tekst
}
rm(tekst)
}
for (i in 1:max(uitspraak3$rijen)){
tekst <- uitspraak3$tekst_waarde[i]
if (str_detect(tekst, "door mr", negate = FALSE) == TRUE){
uitspraak_door <- tekst
}
rm(tekst)
}
}
verzamelde_uitspraken <- dplyr::tibble(.rows = NULL)
uit <- xml2::read_xml("D:/DummyDir/ECLI_NL_CBB_2019_2.xml", as = "text", encoding = "utf-8")
# ================================
# Vanuit de XML het uitspraakdeel filteren...
# ================================
uit3 <- xml_children(uit)
uit3a <- uit3[3]
uit3aa <- xml_children(uit3a)
#uit1a <- xml_find_all(uit1, xpath = "*")
uit3aaa <- uit3aa[4]
uit3aaaa <- xml_find_all(uit3aaa, xpath = "*")
uit3b <- tibble(rijen = seq_along(uit3aaaa), nodeset = uit3aaaa)
uit3_tibble <- uit3b %>%
mutate( kolom_waarde = nodeset %>% map(~xml_name(.)),
tekst_waarde = nodeset %>% map(~xml_text(.))) %>%
select(rijen, kolom_waarde, tekst_waarde)
naam_variabelen <- names(uit3_tibble)
kkk <- as_tibble(uit3_tibble$rijen)
lll <- as_tibble(as.character(uit3_tibble$kolom_waarde))
mmm <- as_tibble(as.character(uit3_tibble$tekst_waarde))
uitspraak3 <- bind_cols(kkk, lll, mmm)
colnames(uitspraak3) <- naam_variabelen
title_waarde <- uitspraak3 %>%
dplyr::filter(kolom_waarde == "title") %>%
dplyr::select(tekst_waarde)
title_waarde <- as.character(title_waarde)
if (title_waarde == "Beslissing"){
for (i in 1:max(uitspraak3$rijen)){
tekst <- uitspraak3$tekst_waarde[i]
if (str_detect(tekst, "gegrond", negate = FALSE) == TRUE){
oordeel <- tekst
}
rm(tekst)
}
for (i in 1:max(uitspraak3$rijen)){
tekst <- uitspraak3$tekst_waarde[i]
if (str_detect(tekst, "door mr", negate = FALSE) == TRUE){
uitspraak_door <- tekst
}
rm(tekst)
}
}
verzamelde_uitspraken <- dplyr::tibble(.rows = NULL)
uit <- xml2::read_xml("D:/DummyDir/ECLI_NL_CBB_2019_100.xml", as = "text", encoding = "utf-8")
# ================================
# Vanuit de XML het uitspraakdeel filteren...
# ================================
uit3 <- xml_children(uit)
uit3a <- uit3[3]
uit3aa <- xml_children(uit3a)
#uit1a <- xml_find_all(uit1, xpath = "*")
uit3aaa <- uit3aa[4]
uit3aaaa <- xml_find_all(uit3aaa, xpath = "*")
uit3b <- tibble(rijen = seq_along(uit3aaaa), nodeset = uit3aaaa)
uit3_tibble <- uit3b %>%
mutate( kolom_waarde = nodeset %>% map(~xml_name(.)),
tekst_waarde = nodeset %>% map(~xml_text(.))) %>%
select(rijen, kolom_waarde, tekst_waarde)
naam_variabelen <- names(uit3_tibble)
kkk <- as_tibble(uit3_tibble$rijen)
lll <- as_tibble(as.character(uit3_tibble$kolom_waarde))
mmm <- as_tibble(as.character(uit3_tibble$tekst_waarde))
uitspraak3 <- bind_cols(kkk, lll, mmm)
colnames(uitspraak3) <- naam_variabelen
# ==========================================
# Uit de tekstwaarde de uitspraak en namen van rechters filteren
# ==========================================
title_waarde <- uitspraak3 %>%
dplyr::filter(kolom_waarde == "title") %>%
dplyr::select(tekst_waarde)
title_waarde <- as.character(title_waarde)
if (title_waarde == "Beslissing"){
for (i in 1:max(uitspraak3$rijen)){
tekst <- uitspraak3$tekst_waarde[i]
if (str_detect(tekst, "gegrond", negate = FALSE) == TRUE){
oordeel <- tekst
}
rm(tekst)
}
for (i in 1:max(uitspraak3$rijen)){
tekst <- uitspraak3$tekst_waarde[i]
if (str_detect(tekst, "door mr", negate = FALSE) == TRUE){
uitspraak_door <- tekst
}
rm(tekst)
}
}
uitspraak_door
library(Rtools)
install.packages("Rtools")
library(shiny)
shiny::runApp('D:/DummyDir/dir_testApp/test_04')
library(shiny)
?sidebarLayout
?checkboxGroupInput
?radioButtons
runApp('D:/DummyDir/git/test_uitspraken_02/app.R')
runApp('D:/DummyDir/git/test_uitspraken_02/app.R')
runApp('D:/DummyDir/git/test_uitspraken_02/app.R')
shiny::runApp('D:/DummyDir/git/test_uitspraken_03')
runApp('D:/DummyDir/git/test_uitspraken_03')
runApp('D:/DummyDir/git/test_uitspraken_03')
runApp('D:/DummyDir/git/test_uitspraken_03')
?hist
runApp('D:/DummyDir/git/test_uitspraken_03')
runApp('D:/DummyDir/git/test_uitspraken_03')
